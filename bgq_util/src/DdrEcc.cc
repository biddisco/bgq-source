/* begin_generated_IBM_copyright_prolog                             */
/*                                                                  */
/* This is an automatically generated copyright prolog.             */
/* After initializing,  DO NOT MODIFY OR MOVE                       */
/* ================================================================ */
/*                                                                  */
/* Licensed Materials - Property of IBM                             */
/*                                                                  */
/* Blue Gene/Q                                                      */
/*                                                                  */
/* (C) Copyright IBM Corp.  2010, 2011                              */
/*                                                                  */
/* US Government Users Restricted Rights -                          */
/* Use, duplication or disclosure restricted                        */
/* by GSA ADP Schedule Contract with IBM Corp.                      */
/*                                                                  */
/* This software is available to you under the                      */
/* Eclipse Public License (EPL).                                    */
/*                                                                  */
/* ================================================================ */
/*                                                                  */
/* end_generated_IBM_copyright_prolog                               */

#include <string.h>
#include <iostream>
#include "DdrEcc.h"


using namespace std;

// the 8 bytes in each row represent the 8 1 bit slices of the 7 check symbols
// the 512 rows represent the 512 bits in 64bytes of use data
// need to generate corresponding matrices for byte65 and AP bits


unsigned char DdrEcc::data_checkmat[DATABITS*NSLICES] = {
  0x7A,0x2D,0x2E,0x63,0x4D,0x47,0x21,0x0C,
  0x3E,0x41,0x55,0x59,0x7B,0x63,0x39,0x4B,
  0x51,0x63,0x74,0x5C,0x5C,0x48,0x66,0x1D,
  0x51,0x74,0x65,0x66,0x33,0x6C,0x33,0x5A,
  0x5D,0x12,0x71,0x5C,0x4B,0x06,0x1D,0x74,
  0x38,0x60,0x5F,0x6A,0x74,0x7B,0x11,0x1B,
  0x57,0x21,0x22,0x4E,0x00,0x27,0x7E,0x27,
  0x79,0x1D,0x7B,0x50,0x7B,0x11,0x24,0x35,
  0x6E,0x7B,0x42,0x36,0x4B,0x7D,0x7B,0x6F,
  0x15,0x39,0x0F,0x55,0x4D,0x3A,0x7E,0x63,
  0x75,0x4D,0x6F,0x59,0x24,0x2D,0x0A,0x22,
  0x4A,0x17,0x14,0x1B,0x28,0x1D,0x72,0x44,
  0x43,0x39,0x14,0x1B,0x1E,0x53,0x74,0x2D,
  0x49,0x69,0x74,0x09,0x1D,0x72,0x3C,0x7E,
  0x57,0x53,0x0C,0x66,0x33,0x6C,0x5A,0x5A,
  0x6D,0x41,0x66,0x36,0x0F,0x33,0x3F,0x06,
  0x58,0x53,0x47,0x78,0x14,0x14,0x24,0x21,
  0x57,0x14,0x42,0x1E,0x35,0x78,0x17,0x7B,
  0x6E,0x59,0x74,0x17,0x59,0x44,0x7E,0x6C,
  0x0D,0x3A,0x7D,0x33,0x44,0x56,0x24,0x39,
  0x2C,0x03,0x0A,0x63,0x4E,0x47,0x55,0x0C,
  0x4F,0x6A,0x4D,0x3A,0x47,0x6A,0x36,0x2E,
  0x2A,0x41,0x7D,0x33,0x28,0x56,0x1B,0x39,
  0x5E,0x1D,0x7E,0x4E,0x5C,0x27,0x5A,0x27,
  0x1C,0x2D,0x06,0x74,0x14,0x4D,0x41,0x09,
  0x2A,0x24,0x63,0x2D,0x00,0x2E,0x72,0x42,
  0x70,0x21,0x41,0x00,0x47,0x4E,0x55,0x69,
  0x2C,0x44,0x69,0x33,0x33,0x18,0x39,0x50,
  0x26,0x35,0x2B,0x36,0x22,0x7D,0x35,0x6F,
  0x13,0x6F,0x4E,0x7D,0x48,0x71,0x03,0x1E,
  0x34,0x5F,0x36,0x78,0x47,0x5A,0x66,0x48,
  0x26,0x3F,0x11,0x50,0x6A,0x5F,0x6A,0x5C,
  0x0B,0x00,0x6A,0x24,0x0A,0x12,0x2D,0x55,
  0x10,0x66,0x65,0x59,0x56,0x63,0x72,0x4B,
  0x7A,0x00,0x12,0x55,0x7E,0x74,0x72,0x0A,
  0x76,0x3F,0x0A,0x6A,0x0A,0x7B,0x30,0x1B,
  0x7C,0x24,0x0C,0x3F,0x11,0x0F,0x0C,0x11,
  0x08,0x74,0x7B,0x63,0x56,0x47,0x0F,0x0C,
  0x6D,0x28,0x2D,0x47,0x2D,0x1B,0x30,0x30,
  0x5E,0x7E,0x06,0x50,0x5A,0x11,0x41,0x35,
  0x64,0x2D,0x30,0x1B,0x05,0x1D,0x78,0x44,
  0x25,0x78,0x4D,0x5C,0x7E,0x06,0x24,0x74,
  0x31,0x53,0x5C,0x1E,0x7B,0x78,0x03,0x7B,
  0x08,0x66,0x5A,0x12,0x44,0x21,0x03,0x53,
  0x31,0x6F,0x74,0x6F,0x63,0x50,0x1E,0x4D,
  0x49,0x65,0x4B,0x3F,0x30,0x41,0x12,0x78,
  0x62,0x28,0x7D,0x7D,0x41,0x3F,0x1B,0x77,
  0x2C,0x53,0x59,0x00,0x5C,0x4E,0x7D,0x69,
  0x5D,0x24,0x42,0x71,0x78,0x66,0x65,0x5F,
  0x37,0x5C,0x2B,0x28,0x60,0x05,0x1D,0x14,
  0x0D,0x0F,0x03,0x47,0x36,0x1B,0x69,0x30,
  0x54,0x2D,0x06,0x3A,0x5A,0x24,0x0F,0x47,
  0x6E,0x3F,0x3C,0x3A,0x5C,0x6A,0x77,0x2E,
  0x51,0x33,0x2B,0x50,0x35,0x11,0x59,0x35,
  0x58,0x17,0x0A,0x59,0x74,0x2D,0x7B,0x22,
  0x5B,0x27,0x5F,0x17,0x21,0x0A,0x72,0x05,
  0x7A,0x0C,0x63,0x66,0x69,0x6C,0x3C,0x5A,
  0x13,0x3C,0x4E,0x5C,0x3C,0x48,0x63,0x1D,
  0x15,0x7E,0x41,0x55,0x35,0x74,0x78,0x0A,
  0x7C,0x63,0x09,0x2D,0x03,0x2E,0x6F,0x42,
  0x3E,0x00,0x21,0x00,0x77,0x00,0x6A,0x00,
  0x31,0x00,0x4E,0x00,0x69,0x00,0x4E,0x00,
  0x26,0x00,0x28,0x00,0x4B,0x00,0x7D,0x00,
  0x51,0x00,0x21,0x00,0x77,0x00,0x6A,0x00,
  0x0C,0x57,0x2D,0x4D,0x63,0x0A,0x4B,0x2D,
  0x4B,0x7F,0x41,0x0C,0x59,0x18,0x28,0x72,
  0x1D,0x32,0x63,0x28,0x5C,0x14,0x55,0x7B,
  0x5A,0x25,0x74,0x03,0x66,0x5F,0x36,0x69,
  0x74,0x4F,0x12,0x2D,0x5C,0x4D,0x72,0x69,
  0x1B,0x58,0x60,0x35,0x6A,0x0F,0x60,0x0A,
  0x27,0x76,0x21,0x6C,0x4E,0x27,0x00,0x59,
  0x35,0x64,0x1D,0x2B,0x50,0x6A,0x24,0x11,
  0x6F,0x15,0x7B,0x74,0x36,0x36,0x12,0x14,
  0x63,0x2C,0x39,0x5A,0x55,0x77,0x59,0x1D,
  0x22,0x38,0x4D,0x36,0x59,0x09,0x0F,0x28,
  0x44,0x5D,0x17,0x0F,0x1B,0x35,0x59,0x36,
  0x2D,0x7A,0x39,0x0F,0x1B,0x4D,0x7E,0x59,
  0x7E,0x20,0x69,0x7D,0x09,0x6F,0x0C,0x42,
  0x5A,0x04,0x53,0x6A,0x66,0x5F,0x36,0x00,
  0x06,0x2C,0x41,0x50,0x36,0x3C,0x35,0x39,
  0x21,0x0B,0x53,0x3F,0x78,0x00,0x35,0x05,
  0x7B,0x43,0x14,0x5C,0x1E,0x4D,0x03,0x6C,
  0x6C,0x37,0x59,0x63,0x17,0x1D,0x28,0x12,
  0x39,0x37,0x3A,0x4E,0x33,0x12,0x6F,0x1D,
  0x0C,0x2F,0x03,0x69,0x63,0x09,0x4B,0x59,
  0x2E,0x25,0x6A,0x77,0x3A,0x2D,0x44,0x18,
  0x39,0x6B,0x41,0x4E,0x33,0x7E,0x6F,0x22,
  0x27,0x43,0x1D,0x30,0x4E,0x7B,0x00,0x7D,
  0x09,0x31,0x2D,0x72,0x74,0x59,0x44,0x48,
  0x42,0x0E,0x24,0x4E,0x2D,0x2E,0x6C,0x30,
  0x69,0x51,0x21,0x41,0x00,0x09,0x27,0x3C,
  0x50,0x68,0x44,0x5A,0x33,0x2B,0x48,0x69,
  0x6F,0x13,0x35,0x1D,0x36,0x5F,0x12,0x5A,
  0x1E,0x7C,0x6F,0x33,0x7D,0x39,0x6F,0x1D,
  0x48,0x6B,0x5F,0x4E,0x78,0x1D,0x12,0x2E,
  0x5C,0x19,0x3F,0x41,0x50,0x35,0x03,0x36,
  0x55,0x0B,0x00,0x4E,0x24,0x18,0x47,0x78,
  0x4B,0x76,0x66,0x3C,0x59,0x35,0x28,0x39,
  0x0A,0x7A,0x00,0x47,0x55,0x0A,0x7E,0x78,
  0x1B,0x49,0x3F,0x60,0x6A,0x71,0x60,0x2B,
  0x11,0x58,0x24,0x33,0x3F,0x1E,0x1E,0x1D,
  0x0C,0x7C,0x74,0x18,0x63,0x11,0x4B,0x03,
  0x30,0x45,0x28,0x6A,0x47,0x36,0x2B,0x00,
  0x35,0x20,0x7E,0x56,0x50,0x4B,0x24,0x74,
  0x44,0x49,0x2D,0x2B,0x1B,0x18,0x59,0x3C,
  0x74,0x5D,0x78,0x11,0x5C,0x78,0x72,0x50,
  0x7B,0x62,0x53,0x42,0x1E,0x03,0x03,0x78,
  0x53,0x6E,0x66,0x48,0x12,0x65,0x72,0x50,
  0x4D,0x5E,0x6F,0x1B,0x6F,0x33,0x1D,0x53,
  0x78,0x2C,0x65,0x74,0x3F,0x71,0x39,0x6A,
  0x77,0x4A,0x28,0x00,0x7D,0x7E,0x48,0x6C,
  0x69,0x7F,0x53,0x59,0x00,0x12,0x27,0x14,
  0x5F,0x79,0x24,0x33,0x71,0x1E,0x39,0x3A,
  0x14,0x6B,0x5C,0x03,0x28,0x65,0x11,0x09,
  0x30,0x02,0x0F,0x44,0x47,0x2D,0x2B,0x59,
  0x47,0x79,0x2D,0x3C,0x3A,0x7E,0x63,0x48,
  0x2E,0x51,0x3F,0x06,0x3A,0x36,0x44,0x59,
  0x35,0x62,0x33,0x7B,0x50,0x24,0x24,0x6C,
  0x22,0x4F,0x17,0x53,0x59,0x59,0x0F,0x59,
  0x05,0x7C,0x27,0x48,0x17,0x2B,0x0F,0x77,
  0x5A,0x76,0x0C,0x05,0x66,0x05,0x36,0x66,
  0x1D,0x2F,0x3C,0x12,0x5C,0x74,0x55,0x7E,
  0x0A,0x6B,0x7E,0x14,0x55,0x41,0x7E,0x72,
  0x42,0x1F,0x63,0x24,0x2D,0x2D,0x6C,0x2D,
  0x00,0x3E,0x00,0x21,0x00,0x77,0x00,0x6A,
  0x00,0x31,0x00,0x4E,0x00,0x69,0x00,0x4E,
  0x00,0x26,0x00,0x28,0x00,0x4B,0x00,0x7D,
  0x00,0x51,0x00,0x21,0x00,0x77,0x00,0x6A,
  0x21,0x0C,0x7A,0x2D,0x2E,0x63,0x6C,0x4B,
  0x39,0x4B,0x3E,0x41,0x55,0x59,0x42,0x28,
  0x66,0x1D,0x51,0x63,0x74,0x5C,0x3A,0x55,
  0x33,0x5A,0x51,0x74,0x65,0x66,0x00,0x36,
  0x1D,0x74,0x5D,0x12,0x71,0x5C,0x56,0x72,
  0x11,0x1B,0x38,0x60,0x5F,0x6A,0x65,0x60,
  0x7E,0x27,0x57,0x21,0x22,0x4E,0x7E,0x00,
  0x24,0x35,0x79,0x1D,0x7B,0x50,0x5F,0x24,
  0x7B,0x6F,0x6E,0x7B,0x42,0x36,0x30,0x12,
  0x7E,0x63,0x15,0x39,0x0F,0x55,0x33,0x59,
  0x0A,0x22,0x75,0x4D,0x6F,0x59,0x2E,0x0F,
  0x72,0x44,0x4A,0x17,0x14,0x1B,0x5A,0x59,
  0x74,0x2D,0x43,0x39,0x14,0x1B,0x6A,0x7E,
  0x3C,0x7E,0x49,0x69,0x74,0x09,0x21,0x0C,
  0x5A,0x5A,0x57,0x53,0x0C,0x66,0x69,0x36,
  0x3F,0x06,0x6D,0x41,0x66,0x36,0x30,0x35,
  0x24,0x21,0x58,0x53,0x47,0x78,0x30,0x35,
  0x17,0x7B,0x57,0x14,0x42,0x1E,0x22,0x03,
  0x7E,0x6C,0x6E,0x59,0x74,0x17,0x27,0x28,
  0x24,0x39,0x0D,0x3A,0x7D,0x33,0x60,0x6F,
  0x55,0x0C,0x2C,0x03,0x0A,0x63,0x1B,0x4B,
  0x36,0x2E,0x4F,0x6A,0x4D,0x3A,0x71,0x44,
  0x1B,0x39,0x2A,0x41,0x7D,0x33,0x33,0x6F,
  0x5A,0x27,0x5E,0x1D,0x7E,0x4E,0x06,0x00,
  0x41,0x09,0x1C,0x2D,0x06,0x74,0x55,0x44,
  0x72,0x42,0x2A,0x24,0x63,0x2D,0x72,0x6C,
  0x55,0x69,0x70,0x21,0x41,0x00,0x12,0x27,
  0x39,0x50,0x2C,0x44,0x69,0x33,0x0A,0x48,
  0x35,0x6F,0x26,0x35,0x2B,0x36,0x17,0x12,
  0x03,0x1E,0x13,0x6F,0x4E,0x7D,0x4B,0x6F,
  0x66,0x48,0x34,0x5F,0x36,0x78,0x21,0x12,
  0x6A,0x5C,0x26,0x3F,0x11,0x50,0x00,0x03,
  0x2D,0x55,0x0B,0x00,0x6A,0x24,0x27,0x47,
  0x72,0x4B,0x10,0x66,0x65,0x59,0x24,0x28,
  0x72,0x0A,0x7A,0x00,0x12,0x55,0x0C,0x7E,
  0x30,0x1B,0x76,0x3F,0x0A,0x6A,0x3A,0x60,
  0x0C,0x11,0x7C,0x24,0x0C,0x3F,0x1D,0x1E,
  0x0F,0x0C,0x08,0x74,0x7B,0x63,0x59,0x4B,
  0x30,0x30,0x6D,0x28,0x2D,0x47,0x1D,0x2B,
  0x41,0x35,0x5E,0x7E,0x06,0x50,0x1B,0x24,
  0x78,0x44,0x64,0x2D,0x30,0x1B,0x7D,0x59,
  0x24,0x74,0x25,0x78,0x4D,0x5C,0x5A,0x72,
  0x03,0x7B,0x31,0x53,0x5C,0x1E,0x78,0x03,
  0x03,0x53,0x08,0x66,0x5A,0x12,0x47,0x72,
  0x1E,0x4D,0x31,0x6F,0x74,0x6F,0x7D,0x1D,
  0x12,0x78,0x49,0x65,0x4B,0x3F,0x22,0x39,
  0x1B,0x77,0x62,0x28,0x7D,0x7D,0x5A,0x48,
  0x7D,0x69,0x2C,0x53,0x59,0x00,0x21,0x27,
  0x65,0x5F,0x5D,0x24,0x42,0x71,0x1D,0x39,
  0x1D,0x14,0x37,0x5C,0x2B,0x28,0x7D,0x11,
  0x69,0x30,0x0D,0x0F,0x03,0x47,0x5F,0x2B,
  0x0F,0x47,0x54,0x2D,0x06,0x3A,0x55,0x63,
  0x77,0x2E,0x6E,0x3F,0x3C,0x3A,0x2B,0x44,
  0x59,0x35,0x51,0x33,0x2B,0x50,0x6C,0x24,
  0x7B,0x22,0x58,0x17,0x0A,0x59,0x0F,0x0F,
  0x72,0x05,0x5B,0x27,0x5F,0x17,0x53,0x0F,
  0x3C,0x5A,0x7A,0x0C,0x63,0x66,0x55,0x36,
  0x63,0x1D,0x13,0x3C,0x4E,0x5C,0x5F,0x55,
  0x78,0x0A,0x15,0x7E,0x41,0x55,0x4D,0x7E,
  0x6F,0x42,0x7C,0x63,0x09,0x2D,0x6C,0x6C,
  0x6A,0x00,0x3E,0x00,0x21,0x00,0x1D,0x00,
  0x4E,0x00,0x31,0x00,0x4E,0x00,0x27,0x00,
  0x7D,0x00,0x26,0x00,0x28,0x00,0x36,0x00,
  0x6A,0x00,0x51,0x00,0x21,0x00,0x1D,0x00,
  0x4B,0x2D,0x0C,0x57,0x2D,0x4D,0x28,0x27,
  0x28,0x72,0x4B,0x7F,0x41,0x0C,0x71,0x6A,
  0x55,0x7B,0x1D,0x32,0x63,0x28,0x09,0x6F,
  0x36,0x69,0x5A,0x25,0x74,0x03,0x50,0x36,
  0x72,0x69,0x74,0x4F,0x12,0x2D,0x2E,0x24,
  0x60,0x0A,0x1B,0x58,0x60,0x35,0x0A,0x05,
  0x00,0x59,0x27,0x76,0x21,0x6C,0x4E,0x7E,
  0x24,0x11,0x35,0x64,0x1D,0x2B,0x74,0x7B,
  0x12,0x14,0x6F,0x15,0x7B,0x74,0x24,0x22,
  0x59,0x1D,0x63,0x2C,0x39,0x5A,0x0C,0x6A,
  0x0F,0x28,0x22,0x38,0x4D,0x36,0x56,0x21,
  0x59,0x36,0x44,0x5D,0x17,0x0F,0x42,0x03,
  0x7E,0x59,0x2D,0x7A,0x39,0x0F,0x65,0x14,
  0x0C,0x42,0x7E,0x20,0x69,0x7D,0x05,0x2D,
  0x36,0x00,0x5A,0x04,0x53,0x6A,0x50,0x5F,
  0x35,0x39,0x06,0x2C,0x41,0x50,0x03,0x05,
  0x35,0x05,0x21,0x0B,0x53,0x3F,0x4D,0x05,
  0x03,0x6C,0x7B,0x43,0x14,0x5C,0x1D,0x21,
  0x28,0x12,0x6C,0x37,0x59,0x63,0x3F,0x0F,
  0x6F,0x1D,0x39,0x37,0x3A,0x4E,0x5C,0x0F,
  0x4B,0x59,0x0C,0x2F,0x03,0x69,0x28,0x50,
  0x44,0x18,0x2E,0x25,0x6A,0x77,0x7E,0x35,
  0x6F,0x22,0x39,0x6B,0x41,0x4E,0x5C,0x5C,
  0x00,0x7D,0x27,0x43,0x1D,0x30,0x4E,0x06,
  0x44,0x48,0x09,0x31,0x2D,0x72,0x30,0x11,
  0x6C,0x30,0x42,0x0E,0x24,0x4E,0x41,0x1E,
  0x27,0x3C,0x69,0x51,0x21,0x41,0x27,0x35,
  0x48,0x69,0x50,0x68,0x44,0x5A,0x7B,0x42,
  0x12,0x5A,0x6F,0x13,0x35,0x1D,0x24,0x05,
  0x6F,0x1D,0x1E,0x7C,0x6F,0x33,0x12,0x24,
  0x12,0x2E,0x48,0x6B,0x5F,0x4E,0x6A,0x33,
  0x03,0x36,0x5C,0x19,0x3F,0x41,0x53,0x03,
  0x47,0x78,0x55,0x0B,0x00,0x4E,0x63,0x60,
  0x28,0x39,0x4B,0x76,0x66,0x3C,0x71,0x0C,
  0x7E,0x78,0x0A,0x7A,0x00,0x47,0x2B,0x72,
  0x60,0x2B,0x1B,0x49,0x3F,0x60,0x0A,0x5A,
  0x1E,0x1D,0x11,0x58,0x24,0x33,0x21,0x03,
  0x4B,0x03,0x0C,0x7C,0x74,0x18,0x28,0x12,
  0x2B,0x00,0x30,0x45,0x28,0x6A,0x6C,0x36,
  0x24,0x74,0x35,0x20,0x7E,0x56,0x74,0x3F,
  0x59,0x3C,0x44,0x49,0x2D,0x2B,0x42,0x24,
  0x72,0x50,0x74,0x5D,0x78,0x11,0x2E,0x28,
  0x03,0x78,0x7B,0x62,0x53,0x42,0x1D,0x7B,
  0x72,0x50,0x53,0x6E,0x66,0x48,0x60,0x35,
  0x1D,0x53,0x4D,0x5E,0x6F,0x1B,0x72,0x60,
  0x39,0x6A,0x78,0x2C,0x65,0x74,0x06,0x1B,
  0x48,0x6C,0x77,0x4A,0x28,0x00,0x35,0x12,
  0x27,0x14,0x69,0x7F,0x53,0x59,0x27,0x06,
  0x39,0x3A,0x5F,0x79,0x24,0x33,0x48,0x24,
  0x11,0x09,0x14,0x6B,0x5C,0x03,0x39,0x6C,
  0x2B,0x59,0x30,0x02,0x0F,0x44,0x6C,0x74,
  0x63,0x48,0x47,0x79,0x2D,0x3C,0x59,0x36,
  0x44,0x59,0x2E,0x51,0x3F,0x06,0x7E,0x6F,
  0x24,0x6C,0x35,0x62,0x33,0x7B,0x74,0x48,
  0x0F,0x59,0x22,0x4F,0x17,0x53,0x56,0x00,
  0x0F,0x77,0x05,0x7C,0x27,0x48,0x18,0x5C,
  0x36,0x66,0x5A,0x76,0x0C,0x05,0x50,0x63,
  0x55,0x7E,0x1D,0x2F,0x3C,0x12,0x09,0x0A,
  0x7E,0x72,0x0A,0x6B,0x7E,0x14,0x2B,0x33,
  0x6C,0x2D,0x42,0x1F,0x63,0x24,0x41,0x00,
  0x00,0x6A,0x00,0x3E,0x00,0x21,0x00,0x1D,
  0x00,0x4E,0x00,0x31,0x00,0x4E,0x00,0x27,
  0x00,0x7D,0x00,0x26,0x00,0x28,0x00,0x36,
  0x00,0x6A,0x00,0x51,0x00,0x21,0x00,0x1D,
  0x6C,0x4B,0x21,0x0C,0x7A,0x2D,0x42,0x28,
  0x42,0x28,0x39,0x4B,0x3E,0x41,0x17,0x71,
  0x3A,0x55,0x66,0x1D,0x51,0x63,0x4E,0x09,
  0x00,0x36,0x33,0x5A,0x51,0x74,0x65,0x50,
  0x56,0x72,0x1D,0x74,0x5D,0x12,0x27,0x2E,
  0x65,0x60,0x11,0x1B,0x38,0x60,0x3A,0x0A,
  0x7E,0x00,0x7E,0x27,0x57,0x21,0x5C,0x4E,
  0x5F,0x24,0x24,0x35,0x79,0x1D,0x24,0x74,
  0x30,0x12,0x7B,0x6F,0x6E,0x7B,0x72,0x24,
  0x33,0x59,0x7E,0x63,0x15,0x39,0x3C,0x0C,
  0x2E,0x0F,0x0A,0x22,0x75,0x4D,0x41,0x56,
  0x5A,0x59,0x72,0x44,0x4A,0x17,0x4E,0x42,
  0x6A,0x7E,0x74,0x2D,0x43,0x39,0x7E,0x65,
  0x21,0x0C,0x3C,0x7E,0x49,0x69,0x55,0x05,
  0x69,0x36,0x5A,0x5A,0x57,0x53,0x65,0x50,
  0x30,0x35,0x3F,0x06,0x6D,0x41,0x56,0x03,
  0x30,0x35,0x24,0x21,0x58,0x53,0x77,0x4D,
  0x22,0x03,0x17,0x7B,0x57,0x14,0x60,0x1D,
  0x27,0x28,0x7E,0x6C,0x6E,0x59,0x53,0x3F,
  0x60,0x6F,0x24,0x39,0x0D,0x3A,0x1D,0x5C,
  0x1B,0x4B,0x55,0x0C,0x2C,0x03,0x11,0x28,
  0x71,0x44,0x36,0x2E,0x4F,0x6A,0x3C,0x7E,
  0x33,0x6F,0x1B,0x39,0x2A,0x41,0x4E,0x5C,
  0x06,0x00,0x5A,0x27,0x5E,0x1D,0x78,0x4E,
  0x55,0x44,0x41,0x09,0x1C,0x2D,0x53,0x30,
  0x72,0x6C,0x72,0x42,0x2A,0x24,0x11,0x41,
  0x12,0x27,0x55,0x69,0x70,0x21,0x53,0x27,
  0x0A,0x48,0x39,0x50,0x2C,0x44,0x63,0x7B,
  0x17,0x12,0x35,0x6F,0x26,0x35,0x3C,0x24,
  0x4B,0x6F,0x03,0x1E,0x13,0x6F,0x05,0x12,
  0x21,0x12,0x66,0x48,0x34,0x5F,0x17,0x6A,
  0x00,0x03,0x6A,0x5C,0x26,0x3F,0x11,0x53,
  0x27,0x47,0x2D,0x55,0x0B,0x00,0x4D,0x63,
  0x24,0x28,0x72,0x4B,0x10,0x66,0x41,0x71,
  0x0C,0x7E,0x72,0x0A,0x7A,0x00,0x1E,0x2B,
  0x3A,0x60,0x30,0x1B,0x76,0x3F,0x30,0x0A,
  0x1D,0x1E,0x0C,0x11,0x7C,0x24,0x11,0x21,
  0x59,0x4B,0x0F,0x0C,0x08,0x74,0x22,0x28,
  0x1D,0x2B,0x30,0x30,0x6D,0x28,0x30,0x6C,
  0x1B,0x24,0x41,0x35,0x5E,0x7E,0x1D,0x74,
  0x7D,0x59,0x78,0x44,0x64,0x2D,0x4D,0x42,
  0x5A,0x72,0x24,0x74,0x25,0x78,0x17,0x2E,
  0x78,0x03,0x03,0x7B,0x31,0x53,0x24,0x1D,
  0x47,0x72,0x03,0x53,0x08,0x66,0x1D,0x60,
  0x7D,0x1D,0x1E,0x4D,0x31,0x6F,0x09,0x72,
  0x22,0x39,0x12,0x78,0x49,0x65,0x69,0x06,
  0x5A,0x48,0x1B,0x77,0x62,0x28,0x27,0x35,
  0x21,0x27,0x7D,0x69,0x2C,0x53,0x78,0x27,
  0x1D,0x39,0x65,0x5F,0x5D,0x24,0x5F,0x48,
  0x7D,0x11,0x1D,0x14,0x37,0x5C,0x56,0x39,
  0x5F,0x2B,0x69,0x30,0x0D,0x0F,0x5C,0x6C,
  0x55,0x63,0x0F,0x47,0x54,0x2D,0x53,0x59,
  0x2B,0x44,0x77,0x2E,0x6E,0x3F,0x17,0x7E,
  0x6C,0x24,0x59,0x35,0x51,0x33,0x47,0x74,
  0x0F,0x0F,0x7B,0x22,0x58,0x17,0x05,0x56,
  0x53,0x0F,0x72,0x05,0x5B,0x27,0x0C,0x18,
  0x55,0x36,0x3C,0x5A,0x7A,0x0C,0x36,0x50,
  0x5F,0x55,0x63,0x1D,0x13,0x3C,0x11,0x09,
  0x4D,0x7E,0x78,0x0A,0x15,0x7E,0x0C,0x2B,
  0x6C,0x6C,0x6F,0x42,0x7C,0x63,0x65,0x41,
  0x1D,0x00,0x6A,0x00,0x3E,0x00,0x3C,0x00,
  0x27,0x00,0x4E,0x00,0x31,0x00,0x69,0x00,
  0x36,0x00,0x7D,0x00,0x26,0x00,0x1E,0x00,
  0x1D,0x00,0x6A,0x00,0x51,0x00,0x3C,0x00,
  0x28,0x27,0x4B,0x2D,0x0C,0x57,0x05,0x6A,
  0x71,0x6A,0x28,0x72,0x4B,0x7F,0x30,0x66,
  0x09,0x6F,0x55,0x7B,0x1D,0x32,0x6A,0x47,
  0x50,0x36,0x36,0x69,0x5A,0x25,0x24,0x35,
  0x2E,0x24,0x72,0x69,0x74,0x4F,0x3C,0x09,
  0x0A,0x05,0x60,0x0A,0x1B,0x58,0x6A,0x30,
  0x4E,0x7E,0x00,0x59,0x27,0x76,0x6F,0x12,
  0x74,0x7B,0x24,0x11,0x35,0x64,0x69,0x50,
  0x24,0x22,0x12,0x14,0x6F,0x15,0x5F,0x56,
  0x0C,0x6A,0x59,0x1D,0x63,0x2C,0x35,0x30,
  0x56,0x21,0x0F,0x28,0x22,0x38,0x1B,0x17,
  0x42,0x03,0x59,0x36,0x44,0x5D,0x55,0x0C,
  0x65,0x14,0x7E,0x59,0x2D,0x7A,0x5C,0x1B,
  0x05,0x2D,0x0C,0x42,0x7E,0x20,0x6C,0x50,
  0x50,0x5F,0x36,0x00,0x5A,0x04,0x03,0x35,
  0x03,0x05,0x35,0x39,0x06,0x2C,0x42,0x55,
  0x4D,0x05,0x35,0x05,0x21,0x0B,0x1E,0x3A,
  0x1D,0x21,0x03,0x6C,0x7B,0x43,0x09,0x7D,
  0x3F,0x0F,0x28,0x12,0x6C,0x37,0x66,0x6C,
  0x5C,0x0F,0x6F,0x1D,0x39,0x37,0x66,0x41,
  0x28,0x50,0x4B,0x59,0x0C,0x2F,0x2B,0x39,
  0x7E,0x35,0x44,0x18,0x2E,0x25,0x14,0x42,
  0x5C,0x5C,0x6F,0x22,0x39,0x6B,0x1D,0x12,
  0x4E,0x06,0x00,0x7D,0x27,0x43,0x53,0x36,
  0x30,0x11,0x44,0x48,0x09,0x31,0x1D,0x63,
  0x41,0x1E,0x6C,0x30,0x42,0x0E,0x65,0x50,
  0x27,0x35,0x27,0x3C,0x69,0x51,0x06,0x74,
  0x7B,0x42,0x48,0x69,0x50,0x68,0x3F,0x18,
  0x24,0x05,0x12,0x5A,0x6F,0x13,0x11,0x18,
  0x12,0x24,0x6F,0x1D,0x1E,0x7C,0x7D,0x17,
  0x6A,0x33,0x12,0x2E,0x48,0x6B,0x35,0x7D,
  0x53,0x03,0x03,0x36,0x5C,0x19,0x6C,0x42,
  0x63,0x60,0x47,0x78,0x55,0x0B,0x63,0x2E,
  0x71,0x0C,0x28,0x39,0x4B,0x76,0x17,0x30,
  0x2B,0x72,0x7E,0x78,0x0A,0x7A,0x2B,0x35,
  0x0A,0x5A,0x60,0x2B,0x1B,0x49,0x35,0x3A,
  0x21,0x03,0x1E,0x1D,0x11,0x58,0x05,0x30,
  0x28,0x12,0x4B,0x03,0x0C,0x7C,0x5C,0x0A,
  0x6C,0x36,0x2B,0x00,0x30,0x45,0x44,0x5C,
  0x74,0x3F,0x24,0x74,0x35,0x20,0x0A,0x69,
  0x42,0x24,0x59,0x3C,0x44,0x49,0x6F,0x0F,
  0x2E,0x28,0x72,0x50,0x74,0x5D,0x56,0x39,
  0x1D,0x7B,0x03,0x78,0x7B,0x62,0x4E,0x39,
  0x60,0x35,0x72,0x50,0x53,0x6E,0x06,0x7D,
  0x72,0x60,0x1D,0x53,0x4D,0x5E,0x1D,0x7B,
  0x06,0x1B,0x39,0x6A,0x78,0x2C,0x63,0x6F,
  0x35,0x12,0x48,0x6C,0x77,0x4A,0x1D,0x12,
  0x27,0x06,0x27,0x14,0x69,0x7F,0x74,0x5F,
  0x48,0x24,0x39,0x3A,0x5F,0x79,0x6C,0x17,
  0x39,0x6C,0x11,0x09,0x14,0x6B,0x65,0x6F,
  0x6C,0x74,0x2B,0x59,0x30,0x02,0x63,0x30,
  0x59,0x36,0x63,0x48,0x47,0x79,0x74,0x0A,
  0x7E,0x6F,0x44,0x59,0x2E,0x51,0x41,0x69,
  0x74,0x48,0x24,0x6C,0x35,0x62,0x47,0x33,
  0x56,0x00,0x0F,0x59,0x22,0x4F,0x41,0x53,
  0x18,0x5C,0x0F,0x77,0x05,0x7C,0x3F,0x14,
  0x50,0x63,0x36,0x66,0x5A,0x76,0x5C,0x66,
  0x09,0x0A,0x55,0x7E,0x1D,0x2F,0x35,0x18,
  0x2B,0x33,0x7E,0x72,0x0A,0x6B,0x55,0x27,
  0x41,0x00,0x6C,0x2D,0x42,0x1F,0x22,0x24,
  0x00,0x1D,0x00,0x6A,0x00,0x3E,0x00,0x3C,
  0x00,0x27,0x00,0x4E,0x00,0x31,0x00,0x69,
  0x00,0x36,0x00,0x7D,0x00,0x26,0x00,0x1E,
  0x00,0x1D,0x00,0x6A,0x00,0x51,0x00,0x3C,
  0x42,0x28,0x6C,0x4B,0x21,0x0C,0x38,0x05,
  0x17,0x71,0x42,0x28,0x39,0x4B,0x29,0x30,
  0x4E,0x09,0x3A,0x55,0x66,0x1D,0x1F,0x6A,
  0x65,0x50,0x00,0x36,0x33,0x5A,0x34,0x24,
  0x27,0x2E,0x56,0x72,0x1D,0x74,0x7A,0x3C,
  0x3A,0x0A,0x65,0x60,0x11,0x1B,0x02,0x6A,
  0x5C,0x4E,0x7E,0x00,0x7E,0x27,0x0B,0x6F,
  0x24,0x74,0x5F,0x24,0x24,0x35,0x5D,0x69,
  0x72,0x24,0x30,0x12,0x7B,0x6F,0x1C,0x5F,
  0x3C,0x0C,0x33,0x59,0x7E,0x63,0x29,0x35,
  0x41,0x56,0x2E,0x0F,0x0A,0x22,0x34,0x1B,
  0x4E,0x42,0x5A,0x59,0x72,0x44,0x04,0x55,
  0x7E,0x65,0x6A,0x7E,0x74,0x2D,0x3D,0x5C,
  0x55,0x05,0x21,0x0C,0x3C,0x7E,0x1C,0x6C,
  0x65,0x50,0x69,0x36,0x5A,0x5A,0x32,0x03,
  0x56,0x03,0x30,0x35,0x3F,0x06,0x3B,0x42,
  0x77,0x4D,0x30,0x35,0x24,0x21,0x2F,0x1E,
  0x60,0x1D,0x22,0x03,0x17,0x7B,0x37,0x09,
  0x53,0x3F,0x27,0x28,0x7E,0x6C,0x3D,0x66,
  0x1D,0x5C,0x60,0x6F,0x24,0x39,0x10,0x66,
  0x11,0x28,0x1B,0x4B,0x55,0x0C,0x3D,0x2B,
  0x3C,0x7E,0x71,0x44,0x36,0x2E,0x73,0x14,
  0x4E,0x5C,0x33,0x6F,0x1B,0x39,0x64,0x1D,
  0x78,0x4E,0x06,0x00,0x5A,0x27,0x26,0x53,
  0x53,0x30,0x55,0x44,0x41,0x09,0x4F,0x1D,
  0x11,0x41,0x72,0x6C,0x72,0x42,0x3B,0x65,
  0x53,0x27,0x12,0x27,0x55,0x69,0x23,0x06,
  0x63,0x7B,0x0A,0x48,0x39,0x50,0x4F,0x3F,
  0x3C,0x24,0x17,0x12,0x35,0x6F,0x1A,0x11,
  0x05,0x12,0x4B,0x6F,0x03,0x1E,0x16,0x7D,
  0x17,0x6A,0x21,0x12,0x66,0x48,0x23,0x35,
  0x11,0x53,0x00,0x03,0x6A,0x5C,0x37,0x6C,
  0x4D,0x63,0x27,0x47,0x2D,0x55,0x46,0x63,
  0x41,0x71,0x24,0x28,0x72,0x4B,0x51,0x17,
  0x1E,0x2B,0x0C,0x7E,0x72,0x0A,0x64,0x2B,
  0x30,0x0A,0x3A,0x60,0x30,0x1B,0x46,0x35,
  0x11,0x21,0x1D,0x1E,0x0C,0x11,0x6D,0x05,
  0x22,0x28,0x59,0x4B,0x0F,0x0C,0x2A,0x5C,
  0x30,0x6C,0x1D,0x2B,0x30,0x30,0x5D,0x44,
  0x1D,0x74,0x1B,0x24,0x41,0x35,0x43,0x0A,
  0x4D,0x42,0x7D,0x59,0x78,0x44,0x29,0x6F,
  0x17,0x2E,0x5A,0x72,0x24,0x74,0x32,0x56,
  0x24,0x1D,0x78,0x03,0x03,0x7B,0x15,0x4E,
  0x1D,0x60,0x47,0x72,0x03,0x53,0x15,0x06,
  0x09,0x72,0x7D,0x1D,0x1E,0x4D,0x38,0x1D,
  0x69,0x06,0x22,0x39,0x12,0x78,0x20,0x63,
  0x27,0x35,0x5A,0x48,0x1B,0x77,0x45,0x1D,
  0x78,0x27,0x21,0x27,0x7D,0x69,0x54,0x74,
  0x5F,0x48,0x1D,0x39,0x65,0x5F,0x02,0x6C,
  0x56,0x39,0x7D,0x11,0x1D,0x14,0x61,0x65,
  0x5C,0x6C,0x5F,0x2B,0x69,0x30,0x51,0x63,
  0x53,0x59,0x55,0x63,0x0F,0x47,0x07,0x74,
  0x17,0x7E,0x2B,0x44,0x77,0x2E,0x79,0x41,
  0x47,0x74,0x6C,0x24,0x59,0x35,0x16,0x47,
  0x05,0x56,0x0F,0x0F,0x7B,0x22,0x5D,0x41,
  0x0C,0x18,0x53,0x0F,0x72,0x05,0x57,0x3F,
  0x36,0x50,0x55,0x36,0x3C,0x5A,0x4C,0x5C,
  0x11,0x09,0x5F,0x55,0x63,0x1D,0x02,0x35,
  0x0C,0x2B,0x4D,0x7E,0x78,0x0A,0x19,0x55,
  0x65,0x41,0x6C,0x6C,0x6F,0x42,0x19,0x22,
  0x3C,0x00,0x1D,0x00,0x6A,0x00,0x02,0x00,
  0x69,0x00,0x27,0x00,0x4E,0x00,0x58,0x00,
  0x1E,0x00,0x36,0x00,0x7D,0x00,0x38,0x00,
  0x3C,0x00,0x1D,0x00,0x6A,0x00,0x6D,0x00,
  0x05,0x6A,0x28,0x27,0x4B,0x2D,0x09,0x3D,
  0x30,0x66,0x71,0x6A,0x28,0x72,0x7B,0x19,
  0x6A,0x47,0x09,0x6F,0x55,0x7B,0x77,0x75,
  0x24,0x35,0x50,0x36,0x36,0x69,0x7E,0x10,
  0x3C,0x09,0x2E,0x24,0x72,0x69,0x48,0x46,
  0x6A,0x30,0x0A,0x05,0x60,0x0A,0x71,0x68,
  0x6F,0x12,0x4E,0x7E,0x00,0x59,0x48,0x64,
  0x69,0x50,0x74,0x7B,0x24,0x11,0x5C,0x34,
  0x5F,0x56,0x24,0x22,0x12,0x14,0x30,0x43,
  0x35,0x30,0x0C,0x6A,0x59,0x1D,0x56,0x1C,
  0x1B,0x17,0x56,0x21,0x0F,0x28,0x39,0x2F,
  0x55,0x0C,0x42,0x03,0x59,0x36,0x11,0x51,
  0x5C,0x1B,0x65,0x14,0x7E,0x59,0x71,0x61,
  0x6C,0x50,0x05,0x2D,0x0C,0x42,0x12,0x70,
  0x03,0x35,0x50,0x5F,0x36,0x00,0x59,0x31,
  0x42,0x55,0x03,0x05,0x35,0x39,0x44,0x79,
  0x1E,0x3A,0x4D,0x05,0x35,0x05,0x3F,0x31,
  0x09,0x7D,0x1D,0x21,0x03,0x6C,0x72,0x3E,
  0x66,0x6C,0x3F,0x0F,0x28,0x12,0x0A,0x5B,
  0x66,0x41,0x5C,0x0F,0x6F,0x1D,0x5F,0x76,
  0x2B,0x39,0x28,0x50,0x4B,0x59,0x27,0x16,
  0x14,0x42,0x7E,0x35,0x44,0x18,0x3A,0x67,
  0x1D,0x12,0x5C,0x5C,0x6F,0x22,0x24,0x79,
  0x53,0x36,0x4E,0x06,0x00,0x7D,0x74,0x75,
  0x1D,0x63,0x30,0x11,0x44,0x48,0x14,0x52,
  0x65,0x50,0x41,0x1E,0x6C,0x30,0x27,0x5E,
  0x06,0x74,0x27,0x35,0x27,0x3C,0x6F,0x25,
  0x3F,0x18,0x7B,0x42,0x48,0x69,0x6F,0x70,
  0x11,0x18,0x24,0x05,0x12,0x5A,0x7E,0x0B,
  0x7D,0x17,0x12,0x24,0x6F,0x1D,0x63,0x6B,
  0x35,0x7D,0x6A,0x33,0x12,0x2E,0x7D,0x16,
  0x6C,0x42,0x53,0x03,0x03,0x36,0x30,0x5B,
  0x63,0x2E,0x63,0x60,0x47,0x78,0x36,0x25,
  0x17,0x30,0x71,0x0C,0x28,0x39,0x5C,0x46,
  0x2B,0x35,0x2B,0x72,0x7E,0x78,0x21,0x4F,
  0x35,0x3A,0x0A,0x5A,0x60,0x2B,0x2E,0x73,
  0x05,0x30,0x21,0x03,0x1E,0x1D,0x14,0x68,
  0x5C,0x0A,0x28,0x12,0x4B,0x03,0x50,0x76,
  0x44,0x5C,0x6C,0x36,0x2B,0x00,0x74,0x19,
  0x0A,0x69,0x74,0x3F,0x24,0x74,0x3F,0x49,
  0x6F,0x0F,0x42,0x24,0x59,0x3C,0x2B,0x46,
  0x56,0x39,0x2E,0x28,0x72,0x50,0x22,0x64,
  0x4E,0x39,0x1D,0x7B,0x03,0x78,0x35,0x5B,
  0x06,0x7D,0x60,0x35,0x72,0x50,0x55,0x13,
  0x1D,0x7B,0x72,0x60,0x1D,0x53,0x50,0x25,
  0x63,0x6F,0x06,0x1B,0x39,0x6A,0x1B,0x43,
  0x1D,0x12,0x35,0x12,0x48,0x6C,0x6A,0x58,
  0x74,0x5F,0x27,0x06,0x27,0x14,0x1D,0x20,
  0x6C,0x17,0x48,0x24,0x39,0x3A,0x33,0x6E,
  0x65,0x6F,0x39,0x6C,0x11,0x09,0x71,0x04,
  0x63,0x30,0x6C,0x74,0x2B,0x59,0x53,0x32,
  0x74,0x0A,0x59,0x36,0x63,0x48,0x33,0x73,
  0x41,0x69,0x7E,0x6F,0x44,0x59,0x6F,0x38,
  0x47,0x33,0x74,0x48,0x24,0x6C,0x72,0x51,
  0x41,0x53,0x56,0x00,0x0F,0x59,0x63,0x1C,
  0x3F,0x14,0x18,0x5C,0x0F,0x77,0x3A,0x68,
  0x5C,0x66,0x50,0x63,0x36,0x66,0x06,0x10,
  0x35,0x18,0x09,0x0A,0x55,0x7E,0x28,0x37,
  0x55,0x27,0x2B,0x33,0x7E,0x72,0x5F,0x4C,
  0x22,0x24,0x41,0x00,0x6C,0x2D,0x60,0x3B,
  0x00,0x3C,0x00,0x1D,0x00,0x6A,0x00,0x02,
  0x00,0x69,0x00,0x27,0x00,0x4E,0x00,0x58,
  0x00,0x1E,0x00,0x36,0x00,0x7D,0x00,0x38,
  0x00,0x3C,0x00,0x1D,0x00,0x6A,0x00,0x6D
};

// byte65 is in symbol position 7 = phi*(1+u*phi^2) = u^2
// bit order: u^3,u^3*v,u^2,u^2*v,u,u*v,1,v
unsigned char DdrEcc::byte65_checkmat[8*NSLICES] = {
  0x6E,0x00,0x66,0x00,0x22,0x00,0x33,0x00,  // (u^2, u^3)
  0x00,0x6E,0x00,0x66,0x00,0x22,0x00,0x33,  // (u^2, u^3*v)
  0x33,0x00,0x6E,0x00,0x66,0x00,0x11,0x00,  // (u^2, u^2)
  0x00,0x33,0x00,0x6E,0x00,0x66,0x00,0x11,  // (u^2, u^2*v)
  0x11,0x00,0x33,0x00,0x6E,0x00,0x77,0x00,  // (u^2, u)
  0x00,0x11,0x00,0x33,0x00,0x6E,0x00,0x77,  // (u^2, u*v)
  0x77,0x00,0x11,0x00,0x33,0x00,0x19,0x00,  // (u^2, 1)
  0x00,0x77,0x00,0x11,0x00,0x33,0x00,0x19}; // (u^2, v) = (pos, coef)

// byte65 is in symbol position 7 = phi*(1+u*phi^2) = u^2
// bit order: u^3,u^3*v,u^2,u^2*v,u,u*v,1,v
unsigned char DdrEcc::byte65_checkmat_bgq[8*NSLICES] = { // bit order 2,3,0,1,6,7,4,5
  0x33,0x00,0x6E,0x00,0x66,0x00,0x11,0x00,  // (u^2, u^2)
  0x00,0x33,0x00,0x6E,0x00,0x66,0x00,0x11,  // (u^2, u^2*v)

  0x6E,0x00,0x66,0x00,0x22,0x00,0x33,0x00,  // (u^2, u^3)
  0x00,0x6E,0x00,0x66,0x00,0x22,0x00,0x33,  // (u^2, u^3*v)

  0x77,0x00,0x11,0x00,0x33,0x00,0x19,0x00,  // (u^2, 1)
  0x00,0x77,0x00,0x11,0x00,0x33,0x00,0x19, // (u^2, v) = (pos, coef)

  0x11,0x00,0x33,0x00,0x6E,0x00,0x77,0x00,  // (u^2, u)
  0x00,0x11,0x00,0x33,0x00,0x6E,0x00,0x77   // (u^2, u*v)
};




// ap is in symbol position 72 = v^6
// ap bits in all 4 beats => ap0 = (pos=v^6, val = (1+u+u^2+u^3)), ap1 = (v^6, v*(1+u+u^2+u^3))
unsigned char DdrEcc::ap10_checkmat[NSLICES] = {0x3E,0x06,0x17,0x4E,0x06,0x27,0x63,0x27};
unsigned char DdrEcc::ap01_checkmat[NSLICES] = {0x27,0x38,0x06,0x59,0x4E,0x21,0x00,0x44};

void DdrEcc::encode_1bit(unsigned char checks[NSLICES], unsigned char *pcheckmat){
  int i;
  for (i=0; i<8; i++) checks[i] ^= pcheckmat[i];
}

unsigned char* DdrEcc::encode_byte(unsigned char byte, unsigned char checks[NSLICES], unsigned char *pcheckmat) {
  int i;
  int mask = 0x80;
  for (i=0; i<8; i++) {
    if (byte & mask) encode_1bit(checks, pcheckmat);
    mask >>= 1;
    pcheckmat += NSLICES;
  }
  return pcheckmat;
}

void DdrEcc::encode_prism(unsigned char data[64], unsigned char byte65, unsigned char ap, unsigned char checks[8]) {
  int i;
  unsigned char *pcheckmat = data_checkmat;

  for (i=0; i<8; i++) checks[i] = 0;

  // encode AP bits
  if (ap & 0x02) encode_1bit(checks, ap10_checkmat);
  if (ap & 0x01) encode_1bit(checks, ap01_checkmat);

  // encode data

  for (i=0; i<64; i++) {
    pcheckmat = encode_byte(data[i], checks, pcheckmat);
  }

  // encode byte65
  encode_byte(byte65, checks, byte65_checkmat);
}

unsigned char* DdrEcc::encode_byte_bgq(unsigned char byte, unsigned char checks[NSLICES], unsigned char *pcheckmat) {
  int i;
  int mask = 0x80;
  for (i=0; i<8; i+=2) {
    if (byte & mask) encode_1bit(checks, pcheckmat);
    mask >>= 1;
    if (byte & mask) encode_1bit(checks, pcheckmat+64*NSLICES);
    mask >>= 1;
    pcheckmat += NSLICES;
  }
  return pcheckmat;
}

void DdrEcc::encode_bgq(unsigned char data[64], unsigned char byte65, unsigned char ap, unsigned char checks[8]) {
  int i,ii,j;
  int ivec[4] = {1,0,3,2};  // process data in order i=1,0,3,2
  unsigned char *pcheckmat = data_checkmat;

  for (i=0; i<8; i++) checks[i] = 0;
  // encode AP bits
  if (ap & 0x02) encode_1bit(checks, ap10_checkmat);
  if (ap & 0x01) encode_1bit(checks, ap01_checkmat);
												    
  // encode data

  for (ii=0; ii<4; ii++) {
    i = ivec[ii];  // process data in order i=1,0,3,2
    for (j=0; j<16; j++) {
      pcheckmat = encode_byte_bgq(data[16*i+j], checks, pcheckmat);
    }
    pcheckmat += 64*NSLICES;
  }

  // encode byte65
  encode_byte(byte65, checks, byte65_checkmat_bgq);
}

void DdrEcc::EncodeBgq(unsigned char data[64], unsigned char checks_out[2][4])
{
    unsigned char checks[8];   
    encode_bgq(data, 0, 0, checks);     // call the orignnal ecc routine supplied

    replace_checkbits(checks);

    //bgq_ecc_layout(checks, checks_out);

    // now how do we map the eccs to the two ransk...
    for (unsigned n = 0; n < 8; n++)
    {
        checks_out[n&1][n>>1] = checks[n];
    }


}



//extra added by jz to replace BGQ check bits
unsigned DdrEcc::shiftbitx2(unsigned char abyte)
{
    unsigned rtn=0x0;
    unsigned shift, aval;

    aval = (unsigned)abyte;
    for (int i=0; i<8; i++)
    {
       shift = (1<<i);
       if (aval & shift) {
          rtn |= (1<<(2*i+1));
       }
    }

    return rtn;
}
//
void DdrEcc::replace_checkbits(unsigned char checks[])
{
   unsigned i, achk0, achk1, achk;
   unsigned char checks_copy[8];

   checks_copy[0] = checks[2];
   checks_copy[1] = checks[3];
   checks_copy[2] = checks[0];
   checks_copy[3] = checks[1];
   checks_copy[4] = checks[6];
   checks_copy[5] = checks[7];
   checks_copy[6] = checks[4];
   checks_copy[7] = checks[5];

   for (i=0; i<4; i++) {
       achk0 = shiftbitx2(checks_copy[2*i]);
       achk1 = shiftbitx2(checks_copy[2*i+1]);
       achk = achk0 | (achk1>>1);
       checks[2*i]   = (unsigned char)(achk>>8);
       checks[2*i+1] = (unsigned char)(achk & 0xFF);
   }
}
/*
main(int argc, char **argv) {

  int i;

  unsigned char data[64] = {0};
  unsigned char checks[8] = {0};
  unsigned char byte65 = 0;
  unsigned char ap = 0;
  
  data[0] = 0x80;


  encode_prism(data, byte65, ap, checks);
  
  for (i=0; i<8; i++) printf("%x ", checks[i]);
  printf(" : prism-checks\n");

  for (i=0; i<8; i++) checks[i] = 0;
  data[0] = 0x80;

  encode_bgq(data, byte65, ap, checks);

  for (i=0; i<8; i++) printf("%x ", checks[i]);
  printf(" : bgq-checks\n");

}
*/

