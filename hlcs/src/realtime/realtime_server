#!/bin/sh
# begin_generated_IBM_copyright_prolog
#
# This is an automatically generated copyright prolog.
# After initializing,  DO NOT MODIFY OR MOVE
# ================================================================
#
# Licensed Materials - Property of IBM
#
# Blue Gene/Q
#
# (C) Copyright IBM Corp.  2012, 2012
#
# US Government Users Restricted Rights -
# Use, duplication or disclosure restricted
# by GSA ADP Schedule Contract with IBM Corp.
#
# This software is available to you under the
# Eclipse Public License (EPL).
#
# ================================================================
#
# end_generated_IBM_copyright_prolog

#
# realtime_server - Blue Gene/Q Real-time server
#
# chkconfig:   - 90 10
# description: Blue Gene/Q Real-time server

# http://fedoraproject.org/wiki/FCNewInit/Initscripts
### BEGIN INIT INFO
# Provides: realtime_server
# Required-Start: $local_fs $network $remote_fs
# Required-Stop: $local_fs $network $remote_fs
# Default-Start:
# Default-Stop: 0 1 2 3 4 5 6
# Short-Description: start|stop|restart|force-reload|status|try-restart|condrestart realtime_server
# Description: Blue Gene/Q Real-time server
### END INIT INFO

# Source function library.
. /etc/rc.d/init.d/functions

exec="/bgsys/drivers/ppcfloor/sbin/bg_realtime_server"
prog=$(basename $exec)
prog2=$prog"97"
prog3=$prog"101"

[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

lockfile=/var/lock/subsys/$prog

start() {
    # Start daemon.
    if [ ! -e $lockfile ] ; then
        echo -n $"Starting $prog: "
        daemon $DAEMON_ARGS $exec $REALTIME_SERVER_ARGS
        retval=$?
        echo
        [ $retval -eq 0 ] && touch $lockfile
        return $retval
    else
        echo $"Lockfile $lockfile for $prog found. bg_realtime_server is already running or was terminated improperly!"
        return 0
    fi
}

stop() {
    # Determine which of the realtime servers is active.
     tempProgToKill=$prog

    # Check for the db2 10.1 version of the realtime server.
    __pids_var_run "$prog3" "$pid_file"
    RC=$?
    if [ -z "$pid" ]; then
            if [ -z "$pid_file" ]; then
                    pid="$(__pids_pidof "$prog3")"
            fi
    fi
    if [ -n "$pid" ] ; then
        # The db2 10.1 version of the realtime server is active.
        ##echo $"$prog - $prog3 is active"
        tempProgToKill=$prog3
    else
        # The db2 10.1 version of the realtime server is not active.
        ##echo $"$prog - $prog3 is not active"
        # Check for the db2 9.7 version of the realtime server.
        pid_file=
        __pids_var_run "$prog2" "$pid_file"
        RC=$?
        if [ -z "$pid" ]; then
                if [ -z "$pid_file" ]; then
                        pid="$(__pids_pidof "$prog2")"
                fi
        fi
        if [ -n "$pid" ] ; then
            # The db2 9.7 version of the realtime server is active.
            ##echo $"$prog - $prog2 is active"
            tempProgToKill=$prog2
        ##else
        ##    # The db2 9.7 version of the realtime server is not active.
        ##    echo $"$prog - $prog2 is not active"
        fi
    fi
    echo $"$prog - going to kill $tempProgToKill"

    # Actually kill the appropriate realtime server.
    echo -n $"Stopping $tempProgToKill: "
    killproc $tempProgToKill
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
    stop
    start
}

case "$1" in
    start|stop|restart)
        $1
        ;;
    force-reload)
        restart
        ;;
    status)
        # Determine which of the realtime servers is active.
        pid= 
        pid_file= 
        tempProgToGetStatusFor=$prog
        # Check for the db2 10.1 version of the realtime server.
        __pids_var_run "$prog3" "$pid_file"
        RC=$?
        if [ -z "$pid" ]; then
                if [ -z "$pid_file" ]; then
                        pid="$(__pids_pidof "$prog3")"
                fi
        fi
        if [ -n "$pid" ] ; then
            # The db2 10.1 version of the realtime server is active.
            ##echo $"$prog - $prog3 is active"
            tempProgToGetStatusFor=$prog3
        else
            # The db2 10.1 version of the realtime server is not active.
            ###echo $"$prog - $prog3 is not active"
            # Check for the db2 9.7 version of the realtime server.
            pid_file=
            __pids_var_run "$prog2" "$pid_file"
            RC=$?
            if [ -z "$pid" ]; then
                    if [ -z "$pid_file" ]; then
                            pid="$(__pids_pidof "$prog2")"
                    fi
            fi
            if [ -n "$pid" ] ; then
                # The db2 9.7 version of the realtime server is active.
                ##echo $"$prog - $prog2 is active"
                tempProgToGetStatusFor=$prog2
            ##else
            ##    # The db2 9.7 version of the realtime server is not active.
            ##    echo $"$prog - $prog2 is not active"
            fi
        fi
        # Actually check the status of this realtime server.
        echo $"$prog - going to check the status of $tempProgToGetStatusFor"
        status $tempProgToGetStatusFor
        ;;
    try-restart|condrestart)
        if status $prog >/dev/null ; then
            restart
        fi
	;;
    reload)
        action $"Service ${0##*/} does not support the reload action: " /bin/false
        exit 3
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|try-restart|force-reload}"
        exit 2
esac
